apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'

apply from: 'jacocosettings.gradle'
apply from: 'sonarqubesettings.gradle'




ext {
    API_VERSION = 'v1'
    API_SUFFIX = 'api'
}


android {

    def configurations = rootProject.extensions.getByName('ext')

    compileSdkVersion configurations['androidCompileSdkVersion']
    buildToolsVersion configurations['androidBuildToolsVersion']
    defaultConfig {
        multiDexEnabled true
        applicationId configurations['androidApplicationId']
        minSdkVersion configurations['androidMinSdkVersion']
        targetSdkVersion configurations['androidTargetSdkVersion']
        versionCode configurations['androidVersionCode']
        versionName configurations['androidVersionName']
        testInstrumentationRunner configurations['testInstrumentationRunner']
        testApplicationId configurations['testApplicationId']
    }

    signingConfigs {
        config {
            def keystorePropertiesFile = rootProject.file("keystore.properties")
            def keystoreProperties = new Properties()
            if (keystorePropertiesFile != null) {
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    flavorDimensions "server"
    productFlavors {
//        mock {
//            dimension = "server"
//            versionNameSuffix "-mock"
//            buildConfigField "String", "ROOT", '"http://debug.com"'
//        }
//        prod {
//            dimension = "server"
//            versionNameSuffix "-prod"
//            buildConfigField "String", "ROOT", String.format('"https://races-app.herokuapp.com/%s/%s"', API_SUFFIX, API_VERSION)
//        }
        dev {
            dimension = "server"
            versionNameSuffix "-dev"
            buildConfigField "String", "ROOT", '"https://races-app.herokuapp.com/api/v1/"'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res', 'src/test/res']
        }
    }
}




dependencies {

    def dependencies = rootProject.ext.dependencies

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation dependencies.jUnit
    testImplementation dependencies.rxTest
    testImplementation dependencies.kluent
    testImplementation dependencies.kluentAndroid
    testImplementation dependencies.assertJ7
    testImplementation dependencies.mockito
    testImplementation dependencies.mockitoKotlin
    testImplementation dependencies.robolectric
    testImplementation dependencies.dagger
    testImplementation dependencies.supportAnnotations
    testProvided dependencies.javaxAnnotations
    androidTestImplementation(dependencies.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    implementation dependencies.kotlinStdLib

    //UI
    compile dependencies.glide
    compile(dependencies.fastAdapter) {
        transitive = true
    }
    compile dependencies.fastAdapterCommons
    compile dependencies.fastAdapterExtensions
    compile dependencies.fastAdapterExtensionsExpandable

    compile dependencies.joda
    compile dependencies.jodaMoney

    compile dependencies.supportRecyclerView
    compile dependencies.supportCardView
    compile dependencies.supportV4
    compile dependencies.supportDesign
    implementation dependencies.supportAppCompatV7
    implementation dependencies.supportConstraintLayout

    implementation dependencies.mpAndroidChart

    //Room
    compile dependencies.room
    compile dependencies.roomRx
    kapt dependencies.roomCompiler

    //MVP
    compile dependencies.moxy
    compile dependencies.moxyAppCompat
    compile dependencies.moxyAndroid
    kapt dependencies.moxyCompiler

    //Navigation
    compile dependencies.cicerone

    //DI
    compile dependencies.dagger
    compile dependencies.supportAnnotations
    provided dependencies.javaxAnnotations
    kapt dependencies.daggerCompiler

    //Rx
    compile dependencies.rxJava
    compile dependencies.rxKotlin
    compile dependencies.rxAndroid

    compile dependencies.retrofit
    compile dependencies.retrofitConverterGson
    compile dependencies.retrofitAdapterRx
    compile dependencies.okHttpLoggingInterceptor


    compile(dependencies.crashlitics) {
        transitive = true
    }
    compile dependencies.timber

    debugCompile dependencies.stetho
    debugCompile dependencies.leakCanary


    compile project(':domain')

}

kapt {
    generateStubs = true
}

